import{_ as n,r as s,o,c as r,b as e,e as i,w as a,a as c,d as t}from"./app-DFklLwn2.js";const h="/online_notesV2/assets/image-20221227221051104-DwxTOOdR.png",d="/online_notesV2/assets/image-20221227221756756-BI3m86QQ.png",u="/online_notesV2/assets/image-20221227223158790-BXDoM-yP.png",_={},p=e("h1",{id:"参数传递与返回值",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参数传递与返回值"},[e("span",null,"参数传递与返回值")])],-1),m={class:"table-of-contents"},f=c('<h2 id="构造函数是否能放在private区" tabindex="-1"><a class="header-anchor" href="#构造函数是否能放在private区"><span>构造函数是否能放在private区</span></a></h2><img src="'+h+'" alt="image-20221227221051104" style="zoom:50%;"><ul><li>当不想被外界创建这个类的对象的时候，可以将构造函数放在private区域</li><li>常在单例模式下使用</li></ul><h2 id="常成员函数" tabindex="-1"><a class="header-anchor" href="#常成员函数"><span>常成员函数</span></a></h2><img src="'+d+'" alt="image-20221227221756756" style="zoom:50%;"><ul><li>const member function</li><li>类的成员分为两种 <ul><li>const: 不改变类对象的数据</li><li>非const：会改变</li></ul></li><li>如果只是访问类的数据成员，最好加上const <ul><li>否则，当定义了一个const的类对象；而后想访问它，如果访问的函数不是常成员函数，则会出错。</li></ul></li></ul><h2 id="参数的传递" tabindex="-1"><a class="header-anchor" href="#参数的传递"><span>参数的传递</span></a></h2><ul><li>可以的情况下尽可能传递引用</li><li>如果不改变记得传递常引用</li></ul><h2 id="返回值的传递" tabindex="-1"><a class="header-anchor" href="#返回值的传递"><span>返回值的传递</span></a></h2><ul><li>可以的情况下尽可能传递引用</li><li>如果返回的是局部变量，则不应返回该局部变量的引用或者指针</li></ul><h2 id="友元" tabindex="-1"><a class="header-anchor" href="#友元"><span>友元</span></a></h2><img src="'+u+'" alt="image-20221227223158790" style="zoom:50%;"><ul><li>被friend的函数，函数可以自由取得friend它的对象的private成员 <ul><li>friend是对函数还是对对象的？</li></ul></li><li>相同class的各个对象互为friend</li></ul>',13);function g(v,x){const l=s("router-link");return o(),r("div",null,[p,e("nav",m,[e("ul",null,[e("li",null,[i(l,{to:"#构造函数是否能放在private区"},{default:a(()=>[t("构造函数是否能放在private区")]),_:1})]),e("li",null,[i(l,{to:"#常成员函数"},{default:a(()=>[t("常成员函数")]),_:1})]),e("li",null,[i(l,{to:"#参数的传递"},{default:a(()=>[t("参数的传递")]),_:1})]),e("li",null,[i(l,{to:"#返回值的传递"},{default:a(()=>[t("返回值的传递")]),_:1})]),e("li",null,[i(l,{to:"#友元"},{default:a(()=>[t("友元")]),_:1})])])]),f])}const E=n(_,[["render",g],["__file","4.参数传递与返回值.html.vue"]]),b=JSON.parse('{"path":"/Programming/cpp/4.%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC.html","title":"参数传递与返回值","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"构造函数是否能放在private区","slug":"构造函数是否能放在private区","link":"#构造函数是否能放在private区","children":[]},{"level":2,"title":"常成员函数","slug":"常成员函数","link":"#常成员函数","children":[]},{"level":2,"title":"参数的传递","slug":"参数的传递","link":"#参数的传递","children":[]},{"level":2,"title":"返回值的传递","slug":"返回值的传递","link":"#返回值的传递","children":[]},{"level":2,"title":"友元","slug":"友元","link":"#友元","children":[]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Programming/cpp/4.参数传递与返回值.md"}');export{E as comp,b as data};
