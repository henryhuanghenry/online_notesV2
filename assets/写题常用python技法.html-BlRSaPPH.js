import{_ as l,r as p,o as i,c as o,b as n,e as s,w as t,a as c,d as e}from"./app-DFklLwn2.js";const u="/online_notesV2/assets/1959611-20200307215621460-1733987446-MJd1iaeS.png",r={},d=n("h1",{id:"写题常用python技法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#写题常用python技法"},[n("span",null,"写题常用python技法")])],-1),k={class:"table-of-contents"},h=c('<h2 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数"><span>随机数</span></a></h2><ul><li>随机函数 random.randint()，左闭右闭</li></ul><h2 id="双端队列" tabindex="-1"><a class="header-anchor" href="#双端队列"><span>双端队列</span></a></h2><ul><li>collections.deque</li><li>构建双端队列 a = deque()</li></ul><p><img src="'+u+`" alt="img"></p><h2 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h2><p><strong>heapq库，是小顶堆</strong></p><ul><li>heapq.heapify([])，将列表堆化 <ul><li>heapq.heapify([(), ()])，将列表堆化</li><li>将元素为元组，元组的第一个元素是排序的key就行</li></ul></li><li>heapq.heapqpush([], value)</li><li>heapq.heapqpop([])</li></ul><h2 id="快读快写" tabindex="-1"><a class="header-anchor" href="#快读快写"><span>快读快写</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sys

<span class="token builtin">input</span> <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
write <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>

write <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;{:.5}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 格式化输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="list注意" tabindex="-1"><a class="header-anchor" href="#list注意"><span>list注意</span></a></h2><ul><li>可以使用reverse进行原地翻转，切片后reverse进行部分原地翻转</li><li>如果是全排列这种回溯法，list去掉尾部记得pop，才能对传入的变量进行操作。</li></ul><h2 id="排序自定义比较函数" tabindex="-1"><a class="header-anchor" href="#排序自定义比较函数"><span>排序自定义比较函数</span></a></h2><ul><li><p>原地排序是sort</p></li><li><p>返回对象是sorted</p></li><li><p>python2中可能可以使用cmp参数，左边小返回-1，左边大返回1</p></li><li><p>统一使用cmp_to_key，也是定义一个函数</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> functools <span class="token keyword">import</span> cmp_to_key

<span class="token keyword">def</span> <span class="token function">my_cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
bb<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span>cmp_to_key<span class="token punctuation">(</span>my_cmp<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二分查找和插入" tabindex="-1"><a class="header-anchor" href="#二分查找和插入"><span>二分查找和插入</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>bisect<span class="token punctuation">.</span>bisect<span class="token punctuation">(</span>array<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token comment"># 找插入位置，插入到相同值的右边</span>
bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>array<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token comment"># 找插入位置，插入到相同值的左边</span>
bisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>array<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
bisect<span class="token punctuation">.</span>insort<span class="token punctuation">(</span>array<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
bisect<span class="token punctuation">.</span>insort_left<span class="token punctuation">(</span>array<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="乘方开方" tabindex="-1"><a class="header-anchor" href="#乘方开方"><span>乘方开方</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">pow</span><span class="token punctuation">(</span>数字，次方<span class="token punctuation">)</span>
x <span class="token operator">**</span> n <span class="token comment"># 也行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="带默认值字典" tabindex="-1"><a class="header-anchor" href="#带默认值字典"><span>带默认值字典</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> defaultdict
defaultdict<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 指定其他默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><ul><li>注意除法是否是整除</li><li>可以使用pypy2，速度快些</li></ul>`,23);function m(v,b){const a=p("router-link");return i(),o("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[s(a,{to:"#随机数"},{default:t(()=>[e("随机数")]),_:1})]),n("li",null,[s(a,{to:"#双端队列"},{default:t(()=>[e("双端队列")]),_:1})]),n("li",null,[s(a,{to:"#堆"},{default:t(()=>[e("堆")]),_:1})]),n("li",null,[s(a,{to:"#快读快写"},{default:t(()=>[e("快读快写")]),_:1})]),n("li",null,[s(a,{to:"#list注意"},{default:t(()=>[e("list注意")]),_:1})]),n("li",null,[s(a,{to:"#排序自定义比较函数"},{default:t(()=>[e("排序自定义比较函数")]),_:1})]),n("li",null,[s(a,{to:"#二分查找和插入"},{default:t(()=>[e("二分查找和插入")]),_:1})]),n("li",null,[s(a,{to:"#乘方开方"},{default:t(()=>[e("乘方开方")]),_:1})]),n("li",null,[s(a,{to:"#带默认值字典"},{default:t(()=>[e("带默认值字典")]),_:1})]),n("li",null,[s(a,{to:"#其他"},{default:t(()=>[e("其他")]),_:1})])])]),h])}const _=l(r,[["render",m],["__file","写题常用python技法.html.vue"]]),g=JSON.parse('{"path":"/Algorithm/%E5%86%99%E9%A2%98%E5%B8%B8%E7%94%A8python%E6%8A%80%E6%B3%95.html","title":"写题常用python技法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"随机数","slug":"随机数","link":"#随机数","children":[]},{"level":2,"title":"双端队列","slug":"双端队列","link":"#双端队列","children":[]},{"level":2,"title":"堆","slug":"堆","link":"#堆","children":[]},{"level":2,"title":"快读快写","slug":"快读快写","link":"#快读快写","children":[]},{"level":2,"title":"list注意","slug":"list注意","link":"#list注意","children":[]},{"level":2,"title":"排序自定义比较函数","slug":"排序自定义比较函数","link":"#排序自定义比较函数","children":[]},{"level":2,"title":"二分查找和插入","slug":"二分查找和插入","link":"#二分查找和插入","children":[]},{"level":2,"title":"乘方开方","slug":"乘方开方","link":"#乘方开方","children":[]},{"level":2,"title":"带默认值字典","slug":"带默认值字典","link":"#带默认值字典","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Algorithm/写题常用python技法.md"}');export{_ as comp,g as data};
