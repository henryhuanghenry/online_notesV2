import{_ as c,r as l,o as i,c as u,b as n,d as s,e as a,w as p,a as o}from"./app-DFklLwn2.js";const r="/online_notesV2/assets/image-20220627213931105-DxAdGPG2.png",k={},d=n("h1",{id:"回溯法学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#回溯法学习"},[n("span",null,"回溯法学习")])],-1),m={href:"https://vuepress-theme-hope.github.io/v2/md-enhance/zh/",target:"_blank",rel:"noopener noreferrer"},v={class:"table-of-contents"},b=o('<h2 id="回溯法基础" tabindex="-1"><a class="header-anchor" href="#回溯法基础"><span>回溯法基础</span></a></h2><ul><li>注意事项res一定要用copy.deepcopy()</li><li>状态变量一定要用append()和pop()，不能用[]，因为[]是浅拷贝会出问题</li></ul><h2 id="题目演练-组合数学" tabindex="-1"><a class="header-anchor" href="#题目演练-组合数学"><span>题目演练：组合数学</span></a></h2><h3 id="_46-全排列" tabindex="-1"><a class="header-anchor" href="#_46-全排列"><span>46.全排列</span></a></h3>',4),h={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://leetcode.cn/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,[s("回溯法有个核心是需要用变量保存"),n("strong",null,"我当前找过什么"),s("，对应于这一题就是path")],-1),f=n("li",null,[s("所以，在递归的过程中， "),n("ul",null,[n("li",null,"进入递归前，把当前已经探索的加上"),n("li",null,"递归出来后，把上次探索的除掉")])],-1),g=n("li",null,"递归函数要决定什么时候return，这一题就是没有数字可以继续取的时候return",-1),w=n("li",null,"我们需要used的帮助，来使得下一次取不会取到之前用过的",-1),x=o(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> turtle <span class="token keyword">import</span> left
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List

<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>style <span class="token keyword">import</span> use
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> false

<span class="token comment"># # 如果省略了used的话，每次查找都要遍历一次path，会增多一次O的时间复杂度</span>
<span class="token comment"># class Solution:</span>
<span class="token comment">#     def permute(self, nums: List[int]) -&gt; List[List[int]]:</span>
<span class="token comment">#         res = []  </span>
<span class="token comment">#         def DFS(res, path, nums):</span>
<span class="token comment">#             flag = 0</span>
<span class="token comment">#             for indexx in range(len(nums)):</span>
<span class="token comment">#                 if nums[indexx] not in path:</span>
<span class="token comment">#                     path.append(nums[indexx]) #状态加入</span>
<span class="token comment">#                     DFS(res, path, nums) # DFS继续</span>
<span class="token comment">#                     path.pop() #回退</span>
<span class="token comment">#                     flag = 1</span>
<span class="token comment">#             if flag == 0:</span>
<span class="token comment">#                 res.append(path.copy()) # 如果不copy的话，path因为传的是引用，之后会被改掉</span>
<span class="token comment">#                 return </span>
<span class="token comment">#         path = [] # 定义这个状态变量</span>
<span class="token comment">#         DFS(res, path, nums)    </span>
<span class="token comment">#         return res</span>
            
<span class="token comment"># 下面这个是有used的版本        </span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
        <span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> indexx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>
                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                    flag <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> 
        used <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> nums<span class="token punctuation">]</span> <span class="token comment"># 用于看看哪些用了，用来对搜索空间剪枝。不然我们已经用过2了后面还用2就很麻烦。</span>
        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    
        <span class="token keyword">return</span> res        

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>permute<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_47-全排列ii" tabindex="-1"><a class="header-anchor" href="#_47-全排列ii"><span>47.全排列II</span></a></h3>`,2),S={href:"https://leetcode.cn/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},q=o('<ul><li>画图解释如何处理多个数： <ul><li>首先，多个相同的数字在排列中是可以多次使用的</li><li>但是211和211这个排列是重复的，如何避免？</li><li><img src="'+r+`" alt="image-20220627213931105" style="zoom:80%;"></li></ul></li><li>的</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type nums: List[int]
        :rtype: List[List[int]]
        &quot;&quot;&quot;</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
        <span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token number">0</span>
            layer_used <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span> j <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
            <span class="token comment"># 画图就可以知道，对于每一层，如果想用的元素和开头的元素相等，那不用想，肯定已经在之前探索过了</span>
            <span class="token comment"># 所以我们可以用layer_used来保存每一层的探索已经用过的那些元素，之后就可以不用再去探索了</span>
            <span class="token keyword">for</span> indexx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> layer_used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    layer_used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>
                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                    flag <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> 
        used <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> nums<span class="token punctuation">]</span> <span class="token comment"># 用于看看哪些用了</span>
        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    
        <span class="token keyword">return</span> res        

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>permuteUnique<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子集" tabindex="-1"><a class="header-anchor" href="#子集"><span>子集</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">core</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> state<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
                state<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>core<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
                state<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

        

    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type nums: List[int]
        :rtype: List[List[int]]
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> nums
        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            state <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
            state<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>core<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function L(D,F){const e=l("ExternalLinkIcon"),t=l("router-link");return i(),u("div",null,[d,n("ul",null,[n("li",null,[s("此处非常感谢"),n("a",m,[s("插件"),a(e)]),s("提供的对vuepress-next的公式支持！")])]),n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#回溯法基础"},{default:p(()=>[s("回溯法基础")]),_:1})]),n("li",null,[a(t,{to:"#题目演练-组合数学"},{default:p(()=>[s("题目演练：组合数学")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_46-全排列"},{default:p(()=>[s("46.全排列")]),_:1})]),n("li",null,[a(t,{to:"#_47-全排列ii"},{default:p(()=>[s("47.全排列II")]),_:1})]),n("li",null,[a(t,{to:"#子集"},{default:p(()=>[s("子集")]),_:1})])])])])]),b,n("p",null,[n("a",h,[s("传送门"),a(e)])]),n("ul",null,[n("li",null,[n("a",y,[s("无敌参考题解"),a(e)])]),_,f,g,w]),x,n("p",null,[n("a",S,[s("传送门"),a(e)])]),q])}const I=c(k,[["render",L],["__file","回溯算法.html.vue"]]),j=JSON.parse('{"path":"/Algorithm/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95.html","title":"回溯法学习","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"回溯法基础","slug":"回溯法基础","link":"#回溯法基础","children":[]},{"level":2,"title":"题目演练：组合数学","slug":"题目演练-组合数学","link":"#题目演练-组合数学","children":[{"level":3,"title":"46.全排列","slug":"_46-全排列","link":"#_46-全排列","children":[]},{"level":3,"title":"47.全排列II","slug":"_47-全排列ii","link":"#_47-全排列ii","children":[]},{"level":3,"title":"子集","slug":"子集","link":"#子集","children":[]}]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Algorithm/回溯算法.md"}');export{I as comp,j as data};
