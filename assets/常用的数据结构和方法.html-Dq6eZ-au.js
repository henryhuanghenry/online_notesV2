import{_ as i,r as l,o as c,c as u,b as n,e as a,w as e,d as s,a as o}from"./app-DFklLwn2.js";const r={},d=n("h1",{id:"常用的数据结构和方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常用的数据结构和方法"},[n("span",null,"常用的数据结构和方法")])],-1),k={class:"table-of-contents"},m={href:"https://www.programiz.com/python-programming/methods/list/pop",target:"_blank",rel:"noopener noreferrer"},h=o('<h2 id="_1-list" tabindex="-1"><a class="header-anchor" href="#_1-list"><span>1. List</span></a></h2><table><thead><tr><th style="text-align:left;">方法</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:left;">index()</td><td>list.index(element, start, end)<br>The <code>index()</code> method returns the index of the specified element in the list.<br>If the element is not found, a <code>ValueError</code> exception is raised.</td></tr><tr><td style="text-align:left;">append()</td><td></td></tr><tr><td style="text-align:left;">extend()</td><td></td></tr><tr><td style="text-align:left;">insert()</td><td></td></tr><tr><td style="text-align:left;">remove()</td><td></td></tr><tr><td style="text-align:left;">count()</td><td></td></tr><tr><td style="text-align:left;">pop()</td><td></td></tr><tr><td style="text-align:left;">reverse()</td><td></td></tr><tr><td style="text-align:left;">sort()</td><td></td></tr><tr><td style="text-align:left;">copy()</td><td></td></tr><tr><td style="text-align:left;">clear()</td><td></td></tr></tbody></table><h2 id="_2-heapq" tabindex="-1"><a class="header-anchor" href="#_2-heapq"><span>2. heapq</span></a></h2><p>https://docs.python.org/zh-cn/3/library/heapq.html</p><p>小顶堆，可以是元组，第一个东西是键值</p>',5),v=n("li",null,"可以在需要小顶堆的地方用",-1),b={href:"https://leetcode.cn/problems/vvXgSW/",target:"_blank",rel:"noopener noreferrer"},_=o(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token comment"># class ListNode(object):</span>
<span class="token comment">#     def __init__(self, val=0, next=None):</span>
<span class="token comment">#         self.val = val</span>
<span class="token comment">#         self.next = next</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type lists: List[ListNode]
        :rtype: ListNode
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> 
        <span class="token keyword">if</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> 
        q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> lists<span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                tmp_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
                tmp_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> i
                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>val<span class="token punctuation">,</span> tmp_head<span class="token punctuation">)</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> res
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            tmp_head <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            tmp_node <span class="token operator">=</span> tmp_head<span class="token punctuation">.</span><span class="token builtin">next</span>
            tmp_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> tmp_head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> tmp_head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>
                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">(</span>tmp_head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">,</span> tmp_head<span class="token punctuation">)</span><span class="token punctuation">)</span>
            tmp_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> tmp_node
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token builtin">next</span>        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-运算符" tabindex="-1"><a class="header-anchor" href="#_3-运算符"><span>3.运算符</span></a></h2><p>^ 表示异或运算， &amp;表示与运算，|表示或运算</p>`,3);function f(x,y){const t=l("router-link"),p=l("ExternalLinkIcon");return c(),u("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#_1-list"},{default:e(()=>[s("1. List")]),_:1})]),n("li",null,[a(t,{to:"#_2-heapq"},{default:e(()=>[s("2. heapq")]),_:1})]),n("li",null,[a(t,{to:"#_3-运算符"},{default:e(()=>[s("3.运算符")]),_:1})])])]),n("ul",null,[n("li",null,[n("a",m,[s("参考网址"),a(p)])])]),h,n("ul",null,[v,n("li",null,[s("如https://leetcode.cn/problems/vvXgSW/ "),n("a",b,[s("剑指 Offer II 078. 合并排序链表"),a(p)])])]),_])}const q=i(r,[["render",f],["__file","常用的数据结构和方法.html.vue"]]),w=JSON.parse('{"path":"/Programming/python/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%96%B9%E6%B3%95.html","title":"常用的数据结构和方法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1. List","slug":"_1-list","link":"#_1-list","children":[]},{"level":2,"title":"2. heapq","slug":"_2-heapq","link":"#_2-heapq","children":[]},{"level":2,"title":"3.运算符","slug":"_3-运算符","link":"#_3-运算符","children":[]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Programming/python/常用的数据结构和方法.md"}');export{q as comp,w as data};
