import{_ as e,r as o,o as l,c,b as n,e as a,w as t,a as u,d as p}from"./app-DFklLwn2.js";const i="/online_notesV2/assets/1656597367-EDjKrb-十大经典排序算法-84SJmsOh.png",r={},k=n("h1",{id:"排序算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#排序算法"},[n("span",null,"排序算法")])],-1),d={class:"table-of-contents"},m=u('<h2 id="排序总结表" tabindex="-1"><a class="header-anchor" href="#排序总结表"><span>排序总结表</span></a></h2><p><img src="'+i+`" alt="十大经典排序算法.png"></p><h2 id="_1-简单排序-o-n-2" tabindex="-1"><a class="header-anchor" href="#_1-简单排序-o-n-2"><span>1. 简单排序(O(n^2))</span></a></h2><ul><li>选择 -- N-1次遍历，每次选最小的pop到前面</li><li>插入 -- 从头开始，窗口从1~N，每次选择窗口中新增的元素插入到正确的位置</li><li>希尔</li><li>冒泡 -- N-1次遍历，每次遍历两两交换</li></ul><h2 id="_2-快速排序" tabindex="-1"><a class="header-anchor" href="#_2-快速排序"><span>2. 快速排序</span></a></h2><h3 id="_2-1-口诀" tabindex="-1"><a class="header-anchor" href="#_2-1-口诀"><span>2.1 口诀</span></a></h3><p><strong>分割排序</strong></p><ul><li>随机生成支点序号pivot,pivot变最右</li><li>bound记录当前最后一个最小(初始为l-1)</li><li>遍历序列(从l到r-1且保证bound+1小于r)，如果比n[r]小，和bound+1交换</li><li>最后交换bound+1和r</li><li>同时返回bound+1</li></ul><p>如果不保证Bound+1小于r，可以省去第四步，且返回bound即可</p><p><strong>快速排序</strong></p><ul><li>给定数组，l和r</li><li>如果l大于等于r了那么返回</li><li>对l和r进行快排，且获得当前的pivot(即支点)</li><li>对l~pivot-1进行排序</li><li>对pivot+1~r进行排序</li></ul><h3 id="_2-2-代码" tabindex="-1"><a class="header-anchor" href="#_2-2-代码"><span>2.2 代码</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">random_part</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pt <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span>
        nums<span class="token punctuation">[</span>pt<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>pt<span class="token punctuation">]</span>
        bound <span class="token operator">=</span> l<span class="token operator">-</span><span class="token number">1</span> <span class="token comment"># 最后一个小的</span>
        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token keyword">and</span> bound <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bound<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>bound<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
                bound <span class="token operator">=</span> bound <span class="token operator">+</span> <span class="token number">1</span>
        nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bound<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>bound<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>
        <span class="token keyword">return</span> bound<span class="token operator">+</span><span class="token number">1</span>
    
    <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> l <span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> l<span class="token operator">&gt;=</span>r<span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            mid <span class="token operator">=</span> self<span class="token punctuation">.</span>random_part<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l <span class="token punctuation">,</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">sortArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type nums: List[int]
        :rtype: List[int]
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>quick_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> nums

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>sortArray<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-堆排序" tabindex="-1"><a class="header-anchor" href="#_3-堆排序"><span>3.堆排序</span></a></h2><h3 id="_3-1-口诀" tabindex="-1"><a class="header-anchor" href="#_3-1-口诀"><span>3.1 口诀</span></a></h3><ul><li>从小到大排</li><li>先建大顶堆</li><li>堆顶和数组尾部交换</li><li>对刚交换到堆顶的元素进行下沉，即对[0~tail-1]调整成堆，循环往复</li></ul><h2 id="python知识" tabindex="-1"><a class="header-anchor" href="#python知识"><span>python知识</span></a></h2><ul><li>随机函数 random.randint()</li></ul>`,18);function v(b,h){const s=o("router-link");return l(),c("div",null,[k,n("nav",d,[n("ul",null,[n("li",null,[a(s,{to:"#排序总结表"},{default:t(()=>[p("排序总结表")]),_:1})]),n("li",null,[a(s,{to:"#_1-简单排序-o-n-2"},{default:t(()=>[p("1. 简单排序(O(n^2))")]),_:1})]),n("li",null,[a(s,{to:"#_2-快速排序"},{default:t(()=>[p("2. 快速排序")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_2-1-口诀"},{default:t(()=>[p("2.1 口诀")]),_:1})]),n("li",null,[a(s,{to:"#_2-2-代码"},{default:t(()=>[p("2.2 代码")]),_:1})])])]),n("li",null,[a(s,{to:"#_3-堆排序"},{default:t(()=>[p("3.堆排序")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_3-1-口诀"},{default:t(()=>[p("3.1 口诀")]),_:1})])])]),n("li",null,[a(s,{to:"#python知识"},{default:t(()=>[p("python知识")]),_:1})])])]),m])}const f=e(r,[["render",v],["__file","排序.html.vue"]]),y=JSON.parse('{"path":"/Algorithm/%E6%8E%92%E5%BA%8F.html","title":"排序算法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"排序总结表","slug":"排序总结表","link":"#排序总结表","children":[]},{"level":2,"title":"1. 简单排序(O(n^2))","slug":"_1-简单排序-o-n-2","link":"#_1-简单排序-o-n-2","children":[]},{"level":2,"title":"2. 快速排序","slug":"_2-快速排序","link":"#_2-快速排序","children":[{"level":3,"title":"2.1 口诀","slug":"_2-1-口诀","link":"#_2-1-口诀","children":[]},{"level":3,"title":"2.2 代码","slug":"_2-2-代码","link":"#_2-2-代码","children":[]}]},{"level":2,"title":"3.堆排序","slug":"_3-堆排序","link":"#_3-堆排序","children":[{"level":3,"title":"3.1 口诀","slug":"_3-1-口诀","link":"#_3-1-口诀","children":[]}]},{"level":2,"title":"python知识","slug":"python知识","link":"#python知识","children":[]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Algorithm/排序.md"}');export{f as comp,y as data};
