import{_ as e,r as p,o,c,b as n,d as s,e as l,a}from"./app-DFklLwn2.js";const i={},u=a('<h1 id="数学" tabindex="-1"><a class="header-anchor" href="#数学"><span>数学</span></a></h1><h2 id="_1-快速幂" tabindex="-1"><a class="header-anchor" href="#_1-快速幂"><span>1.快速幂</span></a></h2><ul><li>递归实现 https://zhuanlan.zhihu.com/p/95902286</li><li>奇数 a^n = a * a^(n - 1)，偶数 a^n = a^n/2 * a^n/2 <ul><li>记忆化</li></ul></li></ul><h2 id="_2-gcd" tabindex="-1"><a class="header-anchor" href="#_2-gcd"><span>2. GCD</span></a></h2><p>https://blog.csdn.net/qq_28295947/article/details/104816571</p><ul><li>gcd(a,b) = gcd(b, a mod b), b == 0 return a</li></ul>',6),r={href:"https://leetcode.cn/problems/minimum-number-of-operations-to-make-all-array-elements-equal-to-1/description/",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#from math import gcd</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> a
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">minOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type nums: List[int]
        :rtype: int
        &quot;&quot;&quot;</span>
        count1 <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                count1 <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> count1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> count1
        
        mincount <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            gcdval <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            tmpcount <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                maxval <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>gcdval<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                minval <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>gcdval<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                gcdval <span class="token operator">=</span> self<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>maxval<span class="token punctuation">,</span> minval<span class="token punctuation">)</span>
                tmpcount <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> gcdval <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    mincount <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>mincount<span class="token punctuation">,</span> tmpcount<span class="token punctuation">)</span>
                    <span class="token keyword">break</span>
        <span class="token keyword">if</span> mincount <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> mincount
               
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("例题："),n("a",r,[s("2654. 使数组所有元素变成 1 的最少操作次数"),l(t)])]),k])}const h=e(i,[["render",d],["__file","数学.html.vue"]]),g=JSON.parse('{"path":"/Algorithm/%E6%95%B0%E5%AD%A6.html","title":"数学","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1.快速幂","slug":"_1-快速幂","link":"#_1-快速幂","children":[]},{"level":2,"title":"2. GCD","slug":"_2-gcd","link":"#_2-gcd","children":[]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Algorithm/数学.md"}');export{h as comp,g as data};
