import{_ as e,r as o,o as l,c,b as n,e as a,w as t,a as i,d as p}from"./app-DFklLwn2.js";const u={},k=n("h1",{id:"链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表"},[n("span",null,"链表")])],-1),r={class:"table-of-contents"},d=i(`<h2 id="题目练习" tabindex="-1"><a class="header-anchor" href="#题目练习"><span>题目练习</span></a></h2><h3 id="_25-k个一组翻转链表" tabindex="-1"><a class="header-anchor" href="#_25-k个一组翻转链表"><span>25. K个一组翻转链表</span></a></h3><ul><li><p>设计了一个递归</p></li><li><p>输入当前要遍历的node，这是第几次遍历count，以及K</p></li><li><p>递归的返回是，下一组的头，当前的尾巴，当前这一组的新头(即第K个结点)</p></li><li><p>对于函数返回后的操作来说，上面说的当前的尾巴，就要接上当前这个结点</p></li><li><p>如果返回到开头，也就是第一次变遍历的时候，当前的尾巴接上当前的结点，当前的结点要接上下一组的头。同时，我们要返回 (下一组的头，当前的这个结点成为尾巴，这一组的新头)</p></li><li><p>注意到，没有东西链接新头，链接新头的是上一组的尾巴，因此我们要保存上一组的尾巴，链接这一组的头</p></li><li><p>同时，要处理遍历不到K个结点就结束的行为，我们返回含有(3个None)的元组，表示不到K个结束</p></li><li><p>在返回到该组原始第一个结点的时候，新的头还是原本的头，同时返回一些变量告知没有遍历结束，整个大程序结束</p></li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">List_Node</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        &quot;&quot;&quot;</span>
        <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> count<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 返回(下一个链表的头，当前的尾巴，当前链表的新头)</span>
            <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> count <span class="token operator">==</span> k <span class="token keyword">and</span> head<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> head<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token punctuation">(</span>last<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">,</span> new_head<span class="token punctuation">)</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
                <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> last <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> new_head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
                        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> last
                        <span class="token keyword">return</span> <span class="token punctuation">(</span>last<span class="token punctuation">,</span> head<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> last <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> new_head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
                        <span class="token keyword">return</span> <span class="token punctuation">(</span>last<span class="token punctuation">,</span> head<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span>
        <span class="token punctuation">(</span>last<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        res <span class="token operator">=</span> new_head
        <span class="token keyword">while</span><span class="token punctuation">(</span>last<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token punctuation">(</span>last<span class="token punctuation">,</span> tail2<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>last<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
            tail<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_head
            tail <span class="token operator">=</span> tail2
        <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">build_list</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    root <span class="token operator">=</span> List_Node<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> root
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> List_Node<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">return</span> root

<span class="token keyword">def</span> <span class="token function">print_list</span><span class="token punctuation">(</span>listt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>listt<span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>listt<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        listt <span class="token operator">=</span> listt<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
    listt <span class="token operator">=</span> build_list<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>reverseKGroup<span class="token punctuation">(</span>listt<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    print_list<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function v(b,m){const s=o("router-link");return l(),c("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#题目练习"},{default:t(()=>[p("题目练习")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#_25-k个一组翻转链表"},{default:t(()=>[p("25. K个一组翻转链表")]),_:1})])])])])]),d])}const _=e(u,[["render",v],["__file","链表.html.vue"]]),w=JSON.parse('{"path":"/Algorithm/%E9%93%BE%E8%A1%A8.html","title":"链表","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"题目练习","slug":"题目练习","link":"#题目练习","children":[{"level":3,"title":"25. K个一组翻转链表","slug":"_25-k个一组翻转链表","link":"#_25-k个一组翻转链表","children":[]}]}],"git":{"updatedTime":1706457681000,"contributors":[{"name":"henryhuanghenry","email":"henryhuanghenry@outlook.com","commits":1}]},"filePathRelative":"Algorithm/链表.md"}');export{_ as comp,w as data};
